TestCase subclass: #HtmlTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 18:30'!test02AppendToHtmlNode	self assert: (Html build: [:html | html append: 'Lorem ipsum']) equals: '<!!DOCTYPE html><html>Lorem ipsum</html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 18:01'!test01BuildMarkup	self assert: (Html build: [:html |]) equals: '<!!DOCTYPE html><html></html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 18:47'!test03Builder01	| builder |	builder := Html new.	builder pushChildNode: HtmlNode new.	builder pushChildNode: HeadNode new.	builder popNode.	builder pushChildNode: BodyNode new.	builder popNode.	builder popNode.	self assert: (builder contents) equals: '<!!DOCTYPE html><html><head></head><body></body></html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 19:22'!test04Builder02	| builder |	builder := Html new.	builder pushChildNode: HtmlNode new.	builder pushChildNode: HeadNode new.	builder popNode.	builder pushChildNode: BodyNode new.	builder pushChildNode: H1Node new.	builder popNode.	builder pushChildNode: PNode new.	builder popNode.	builder popNode.	builder popNode.	self assert: (builder contents) equals: '<!!DOCTYPE html><html><head></head><body><h1></h1><p></p></body></html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 19:23'!test05With	self assert: (Html build: [:html | html body with:[html append: 'Lorem ipsum']]) equals: '<!!DOCTYPE html><html><body>Lorem ipsum</body></html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 19:45'!test06SyntaxSugar01	self assert: (Html build: [:html | html head title append: 'Lorem ipsum']) equals: '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!HtmlTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 19:45'!test07SyntaxSugar02	self assert: (Html build: [:html | html head title: 'Lorem ipsum']) equals: '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !TestCase subclass: #ValidacionesTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 11:36'!test03AnidamientoNodosInline	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |				   html body: [                     html h1: []				   ]]) = '<!!DOCTYPE html><html><body><h1></h1></body></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test04AnidamientoNodosInlineAppend	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |              html head title append: 'Lorem ipsum']) = '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:51'!test02AnidamientoNodosNoAceptado	"Prueba de anidamiento no permitido"| builder |builder := Html new.builder pushChildNode: (HtmlNode new: builder).builder pushChildNode: (HeadNode new: builder).self should: [builder pushChildNode: (BodyNode new: builder)] raise: TestResult error description: 'Debe fallar si se quiere anidar un tag no permitido, como Body dentro de Head'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 11:19'!test01AnidamientoNodosAceptado	"comment stating purpose of message"| builder |builder := Html new.builder pushChildNode: (HtmlNode new: builder).builder pushChildNode: (HeadNode new: builder).builder popNode.builder pushChildNode: (BodyNode new: builder).builder popNode.builder popNode.builder contents.self assert: builder contents = '<!!DOCTYPE html><html><head></head><body></body></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test05AnidamientoNodosInlineTexto	"Prueba de anidamiento inline permitido"self assert: (Html build: [ :html |				  html head title: 'Lorem ipsum']) = '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!ValidacionesTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:13'!test06AnidamientoNodosInlineNoValido	"Prueba de anidamiento inline permitido"self should: [Html build: [ :html |				  html head body: 'Lorem ipsum'				]] raise: TestResult error description: 'No se debe permitir anidar Body en Head.'.! !TestCase subclass: #DefinitionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 20:55'!test03GeneracionConNodoNuevoBasico	"Creación de un nodo nuevo sin restricciones"Html defNode: #Html canHave: #(Head Body Basico Basico2 Articulo Nota Bajada).Html defNode: #Basico.self assert: (Html build: [ :html | html basico: []]) = '<!!DOCTYPE html><html><basico></basico></html>' description: 'Fallo en generación con bloque'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:59'!test06GeneracionConNodoNuevo	"Creación de un nodo nuevo sin restricciones"Html defNode: #Articulo  canHave: #(H1 H2).self assert: (Html build: [ :html | html articulo: [html h2:'Titulo']]) = '<!!DOCTYPE html><html><articulo><h2>Titulo</h2></articulo></html>' description: 'No se permite nodo anidado permitido (h2) con bloque'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:19'!test01CreacionDeNodoBasico	"Creación de un nodo nuevo sin restricciones"| clase |Html defNode: #Alguno.clase := Smalltalk classNamed: 'AlgunoNode'.self assert: clase isNotNil description: 'Tiene que haberse creado la clase para el nodo nuevo.'.self assert: clase tagName = 'alguno'.self assert: clase canHave isEmpty description: 'Es una nodo sin restricciones.'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!test07GeneracionConNodoNuevoInline	"Creación de un nodo nuevo sin restricciones"Html defNode: #Body canHave: #(Table P B Basico2 Nota Div H1 H2).Html defNode: #Nota canHave: #(H1 H2).self assert: (Html build: [ :html | html body nota h1: 'Titulo']) = '<!!DOCTYPE html><html><body><nota><h1>Titulo</h1></nota></body></html>' description: 'Se debe poder anidar los nodos permitidos (h1 en nota)'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!test05GeneracionConNodoNuevoBasicoConAppend	"Generación con un nuevo nodo sin restricciones, con anidamiento"Html defNode: #Body canHave: #(Table P B Basico2 Nota Div H1 H2).Html defNode: #Basico2.self assert: (Html build: [ :html | html body basico2 append:'hola']) = '<!!DOCTYPE html><html><body><basico2>hola</basico2></body></html>'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:49'!test04GeneracionConNodoNuevoBasicoNoSePermiteAnidamiento	"Creación de un nodo nuevo sin restricciones"Html defNode: #Basico.self should: [Html build: [ :html | html basico p: []]] raise: TestResult error  description: 'El nodo no tiene subnodos definidos, así que no puede permitir nada que no sea texto plano.'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 12:22'!test02CreacionDeNodoConRestricciones	"Creación de un nodo nuevo sin restricciones"| clase |Html defNode: #Restringido canHave: #(Head Body).clase := Smalltalk classNamed: 'RestringidoNode'.self assert: clase isNotNil description: 'Tiene que haberse creado la clase para el nodo nuevo.'.self assert: clase tagName = 'restringido'.self assert: clase canHave = #(Head Body) description: 'Se debe tener registrado cuáles son los nodos que permite'.! !!DefinitionTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:11'!test08GeneracionConNodoNuevoAnidamientoNoPermitido	"Creación de un nodo nuevo sin restricciones"Html defNode: #Bajada  canHave: #(H1 H2).self should: [Html build: [ :html | html body bajada p: 'Bajada']] raise: TestResult error description: 'No se debe permitir que se aniden nodos no permitidos (p en bajada)'.! !TestCase subclass: #HtmlNodeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!HtmlNodeTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/7/2015 17:27'!test01Enunciado	| ws node1 |	ws := WriteStream on: String new.	node1 := HtmlNode new.	node1 openTag: ws.	node1 closeTag: ws.	self assert: (ws contents) equals: '<html></html>'.! !Object subclass: #Html	instanceVariableNames: 'stack ws'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!Html commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!basico2 self pushChildNode: Basico2Node new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!alguno self pushChildNode: AlgunoNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!bajada self pushChildNode: BajadaNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!html: aBlockClosureOrString self html with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!basico: aBlockClosureOrString self basico with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!alguno: aBlockClosureOrString self alguno with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!nota: aBlockClosureOrString self nota with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!basico self pushChildNode: BasicoNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!articulo: aBlockClosureOrString self articulo with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!articulo self pushChildNode: ArticuloNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!restringido: aBlockClosureOrString self restringido with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!restringido self pushChildNode: RestringidoNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!html self pushChildNode: HtmlNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!nota self pushChildNode: NotaNode new. ^ self! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!basico2: aBlockClosureOrString self basico2 with: aBlockClosureOrString! !!Html methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!bajada: aBlockClosureOrString self bajada with: aBlockClosureOrString! !!Html methodsFor: 'private' stamp: 'TobiasValdesCastro 11/7/2015 18:42'!initStack	stack := Stack new.! !!Html methodsFor: 'private' stamp: 'TobiasValdesCastro 11/11/2015 20:44'!pushChildNode: aChildNode	| topNode |	(stack isEmpty) ifFalse: [		topNode := stack top.		(topNode accepts: aChildNode) ifFalse: [Error new signal: 'Nodo ', aChildNode tagName, ' no es aceptado por el nodo ', topNode tagName].		].	stack push: aChildNode.	aChildNode openTag: ws! !!Html methodsFor: 'private' stamp: 'TobiasValdesCastro 11/7/2015 19:47'!popEverything	[stack isEmpty] whileFalse: [self popNode]	! !!Html methodsFor: 'private' stamp: 'TobiasValdesCastro 11/7/2015 18:45'!popNode	(stack pop) closeTag: ws.! !!Html methodsFor: 'private' stamp: 'TobiasValdesCastro 11/7/2015 17:56'!setMarkup	ws := WriteStream on: String new.	ws << '<!!DOCTYPE html>'.! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!div	self pushChildNode: DivNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:11'!b: aBlockClosureOrString 	self b with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:11'!h1: aBlockClosureOrString 	self h1 with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/7/2015 18:27'!append: aString	"agrega texto plano"	ws << aString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!table: aBlockClosureOrString 	self table with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!table	self pushChildNode: TableNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!div: aBlockClosureOrString 	self div with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:14'!with: aBlockClosureOrString	(aBlockClosureOrString isKindOf: String) ifTrue: [self append: aBlockClosureOrString] 														 ifFalse: aBlockClosureOrString.	self popNode! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!body self pushChildNode: BodyNode new. ^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 18:39'!h1	self pushChildNode: H1Node new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/7/2015 18:26'!openHtmlNode	(HtmlNode new) openTag: ws! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:10'!title: aBlockClosureOrString	self title with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:17'!th: aBlockClosureOrString	self th with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!td	self pushChildNode: TdNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:17'!tr	self pushChildNode: TrNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:15'!h2: aBlockClosureOrString 	self h2 with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!p: aBlockClosureOrString 	self p with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 18:36'!b	self pushChildNode: BNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/7/2015 19:25'!head	self pushChildNode: HeadNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:17'!tr: aBlockClosureOrString	self tr with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/7/2015 18:26'!closeHtmlNode	(HtmlNode new) closeTag: ws! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:15'!h2	self pushChildNode: H2Node new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:16'!p	self pushChildNode: PNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:17'!td: aBlockClosureOrString	self td with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:11'!head: aBlockClosureOrString	self head with: aBlockClosureOrString! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/11/2015 19:17'!th	self pushChildNode: ThNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/7/2015 19:26'!title	self pushChildNode: TitleNode new.	^ self! !!Html methodsFor: 'building' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!body: aBlockClosureOrString self body with: aBlockClosureOrString! !!Html methodsFor: 'accessing' stamp: 'TobiasValdesCastro 11/7/2015 18:00'!contents	^ ws contents.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Html class	instanceVariableNames: ''!!Html class methodsFor: 'node creation' stamp: 'TobiasValdesCastro 11/11/2015 20:13'!defNode: aSymbol 	self defNode: aSymbol canHave: #()! !!Html class methodsFor: 'node creation' stamp: 'TobiasValdesCastro 11/15/2015 22:09'!defNode: aSymbol canHave: acceptedNodes	| className clase tagName |	className := (aSymbol, 'Node').	clase := Node subclass: className				 instanceVariableNames: ''				 classVariableNames: ''				 category: 'PLP-HTMLBuilder'.					tagName := clase tagName.	clase class compile: ('canHave ^', acceptedNodes asString).	self compile: (tagName, ' self pushChildNode: ', className, ' new. ^ self').	self compile: (tagName, ': aBlockClosureOrString self ', tagName, ' with: aBlockClosureOrString').! !!Html class methodsFor: 'instance creation' stamp: 'TobiasValdesCastro 11/7/2015 18:41'!new	| instance |	instance := super new.	instance initStack.	instance setMarkup.	^ instance! !!Html class methodsFor: 'code building' stamp: 'TobiasValdesCastro 11/10/2015 21:49'!build: aBlock	| builder |	builder := Html new.	builder pushChildNode: HtmlNode new.	aBlock value: builder.	builder popEverything.	^ builder contents.! !TestCase subclass: #DocumentTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:23'!test04GeneracionConBloque	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html body: [html b:'Negrita']			   ].self assert: salida = '<!!DOCTYPE html><html><body><b>Negrita</b></body></html>'.	! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/10/2015 22:39'!test02GeneracionSoloTexto	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html head: 'Lorem ipsum'			   ]. self assert: salida = '<!!DOCTYPE html><html><head>Lorem ipsum</head></html>'! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:26'!test05GeneracionConBloqueConWidth	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html body with: [html h1:'Lorem ipsum']			   ].self assert: salida =  '<!!DOCTYPE html><html><body><h1>Lorem ipsum</h1></body></html>'.	! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:37'!test01DocumentoVacio	"Generación de un documento vacío"self assert: (Html build: [ :html | ]) = '<!!DOCTYPE html><html></html>'.! !!DocumentTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 13:26'!test03GeneracionAppend	"Generación solo-texto en el documento"	| salida |salida := Html build: [ :html | 			     html append: 'Lorem ipsum'			   ].self assert: salida = '<!!DOCTYPE html><html>Lorem ipsum</html>'.	! !TestCase subclass: #GeneralTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!GeneralTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:29'!test01GeneracionCompleta	"Generación completa de un documento"	| salida |salida := (Html build: [ :html| 	 html body: [    html h1: 'Título'.    html p: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit.'.    html h2: 'Subtítulo'.    html p: [      html append: 'Duis aute irure dolor in reprehenderit in voluptate '.      html b: 'velit esse cillum dolore'.      html append: ' eu fugiat nulla pariatur.'    ]  ]]).self assert: salida = '<!!DOCTYPE html><html><body><h1>Título</h1><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p><h2>Subtítulo</h2><p>Duis aute irure dolor in reprehenderit in voluptate <b>velit esse cillum dolore</b> eu fugiat nulla pariatur.</p></body></html>'.! !Object subclass: #Node	instanceVariableNames: 'builder'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!Node methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:44'!tagName	^self class tagName! !!Node methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 18:49'!setBuilder: aBuilder	builder := aBuilder! !!Node methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:10'!openTag: aWriteStream	aWriteStream << '<' << self class tagName << '>'.! !!Node methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:10'!closeTag: aWriteStream	aWriteStream << '</' << self class tagName << '>'.! !!Node methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:19'!accepts: aNode	| nodeClass |	nodeClass := ((aNode class externalName splitOn: 'Node') at: 1) asSymbol.	^ self class canHave includes: nodeClass! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Node class	instanceVariableNames: ''!!Node class methodsFor: 'instance creation' stamp: 'TobiasValdesCastro 11/11/2015 18:48'!new: aBuilder	| instance |	instance := super new.	instance setBuilder: aBuilder.	^ instance! !!Node class methodsFor: 'accessing' stamp: 'TobiasValdesCastro 11/11/2015 20:00'!canHave	"lista de nodos aceptados, que debe definir cada subclase"	self subclassResponsibility! !!Node class methodsFor: 'accessing' stamp: 'TobiasValdesCastro 11/11/2015 20:08'!tagName	^((self class externalName splitOn: 'Node') at: 1) asLowercase! !Node subclass: #ArticuloNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ArticuloNode class	instanceVariableNames: ''!!ArticuloNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#H1 #H2)! !Node subclass: #TableNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TableNode class	instanceVariableNames: ''!!TableNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave	^#(Th Tr)! !Node subclass: #TdNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TdNode class	instanceVariableNames: ''!!TdNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave ^ #(Table P B Div H1 H2)! !Node subclass: #RestringidoNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RestringidoNode class	instanceVariableNames: ''!!RestringidoNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#Head #Body)! !Node subclass: #BasicoNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BasicoNode class	instanceVariableNames: ''!!BasicoNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#()! !Node subclass: #HtmlNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HtmlNode class	instanceVariableNames: ''!!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#Head #Body #Basico #Basico2 #Articulo #Nota #Bajada)! !Node subclass: #H2Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!H2Node class	instanceVariableNames: ''!!H2Node class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:02'!canHave	^#()! !Node subclass: #AlgunoNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgunoNode class	instanceVariableNames: ''!!AlgunoNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#()! !Node subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TitleNode class	instanceVariableNames: ''!!TitleNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:02'!canHave	^#()! !Node subclass: #NotaNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NotaNode class	instanceVariableNames: ''!!NotaNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#H1 #H2)! !Node subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeadNode class	instanceVariableNames: ''!!HeadNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave ^ #(Title)! !Node subclass: #ThNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ThNode class	instanceVariableNames: ''!!ThNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave ^ #(Td)! !Node subclass: #PNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PNode class	instanceVariableNames: ''!!PNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave ^ #(B)! !Node subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BodyNode class	instanceVariableNames: ''!!BodyNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#Table #P #B #Basico2 #Nota #Div #H1 #H2)! !Node subclass: #Basico2Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Basico2Node class	instanceVariableNames: ''!!Basico2Node class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#()! !TestCase subclass: #NodeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!!NodeTest methodsFor: 'as yet unclassified' stamp: 'ChristianCossio 11/10/2015 10:34'!test01AperturaYCierreTagVacio	"comment stating purpose of message"| ws node |ws := WriteStream on: String new.node := HtmlNode new.node openTag: ws.node closeTag: ws.self assert: ws contents = '<html></html>' description: 'No se pudo generar el tag html vacío'! !Node subclass: #BajadaNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BajadaNode class	instanceVariableNames: ''!!BajadaNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:27'!canHave ^#(#H1 #H2)! !Node subclass: #H1Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!H1Node class	instanceVariableNames: ''!!H1Node class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:02'!canHave	^#()! !Node subclass: #TrNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TrNode class	instanceVariableNames: ''!!TrNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:23'!canHave ^ #(Td)! !Node subclass: #BNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BNode class	instanceVariableNames: ''!!BNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/11/2015 20:01'!canHave	^#()! !Node subclass: #DivNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-HTMLBuilder'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DivNode class	instanceVariableNames: ''!!DivNode class methodsFor: 'as yet unclassified' stamp: 'TobiasValdesCastro 11/15/2015 22:22'!canHave ^ #(Table P B Div H1 H2)! !